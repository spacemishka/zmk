/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define TIMEOUT 300

&encoder_1 {
    status = "okay";
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_btclr {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 3>;
            bindings = <&bt BT_CLR>;
        };
        /*combo_reset {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 1>;
            bindings = <&reset>;
        };devicetree error: /combos/combo_reset: undefined node label 'reset' */
        combo_bootloader {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 2>;
            bindings = <&bootloader>;
        };
        combo_bt_nxt {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 4>;
            bindings = <&bt BT_NXT>;
        };
        combo_mute {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 5>;
            bindings = <&kp C_MUTE>;
        };
        combo_bt1 {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 6>;
            bindings = <&bt BT_SEL 0>;
        };
        combo_bt2 {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 7>;
            bindings = <&bt BT_SEL 1>;
        };
        combo_bt3 {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 8>;
            bindings = <&bt BT_SEL 2>;
        };
        combo_bt4 {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 9>;
            bindings = <&bt BT_SEL 3>;
        };
        combo_bt5 {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 10>;
            bindings = <&bt BT_SEL 4>;
        };
    };
    
    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder_1>;
    };


    keymap0: keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "default layer";
            bindings = <
                &kp ESC     &trans    &kp F1  &kp F2    &kp F3  &kp F4  &kp F5     &kp F6  &kp F7  &kp F8     &kp F9    &kp F10    &kp F11     &kp F12       &kp PSCRN  &kp SLCK  &kp PAUSE_BREAK    &trans      &trans        &trans           &trans     
                &kp GRAVE   &kp N1    &kp N2  &kp N3    &kp N4  &kp N5  &kp N6     &kp N7  &kp N8  &kp N9     &kp N0    &kp MINUS  &kp EQUAL   &kp BSPC      &kp INS    &kp HOME  &kp PG_UP          &kp KP_NUM  &kp KP_SLASH  &kp KP_ASTERISK  &kp KP_MINUS 
                &kp TAB     &kp Q     &kp W   &kp E     &kp R   &kp T   &kp Y      &kp U   &kp I   &kp O      &kp P     &kp LBRC   &kp RBRC    &kp BSLH      &kp DEL    &kp END   &kp PG_DN          &kp KP_N7   &kp KP_N8     &kp KP_N9        &kp KP_PLUS 
                &kp CAPS    &trans    &kp A   &kp S     &kp D   &kp F   &kp G      &kp H   &kp J   &kp K      &kp L     &kp SEMI   &kp APOS    &kp ENTER     &trans     &trans    &trans             &kp KP_N4   &kp KP_N5     &kp KP_N6        &trans     
                &kp LSHIFT  &trans    &kp Z   &kp X     &kp C   &kp V   &kp B      &kp N   &kp M   &kp COMMA  &kp DOT   &kp SLASH  &kp RSHIFT  &kp RSHIFT    &trans     &kp UP    &trans             &kp KP_N1   &kp KP_N2     &kp KP_N3        &kp KP_ENTER 
                &kp LCTRL   &kp LGUI  &trans  &kp LALT  &trans  &trans  &kp SPACE  &trans  &trans  &kp RALT   &kp RGUI  &trans     &kp K_APP   &kp RCTRL     &kp LEFT   &kp DOWN  &kp RIGHT          &trans      &kp KP_N0     &kp KP_DOT       &trans    
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;

        }; 
        
    };
};
